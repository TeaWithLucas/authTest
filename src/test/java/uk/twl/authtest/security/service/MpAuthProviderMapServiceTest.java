package uk.twl.authtest.security.service;import static org.assertj.core.api.Assertions.assertThat;import static org.assertj.core.api.Assertions.assertThatThrownBy;import static uk.twl.authtest.security.provider.MpAuthProviderMap.NIM_AUTH_PROVIDER;import java.util.List;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.EnumSource;import org.mockito.Mock;import org.mockito.junit.jupiter.MockitoExtension;import uk.twl.authtest.security.provider.AuthProvider;import uk.twl.authtest.security.provider.KcAuthProvider;import uk.twl.authtest.security.provider.MpAuthProviderMap;import uk.twl.authtest.security.provider.NimAuthProvider;@ExtendWith(MockitoExtension.class)@DisplayName("MpAuthProviderMapService Unit Tests")class MpAuthProviderMapServiceTest {  @Mock  private KcAuthProvider kcAuthProvider;  @Mock  private NimAuthProvider nimAuthProvider;  private MpAuthProviderMapService mpAuthProviderMapService;  @ParameterizedTest  @EnumSource(MpAuthProviderMap.class)  @DisplayName("Test getAuthProvider with valid MpAuthProviderMap")  void testGetAuthProviderWithValidMap(MpAuthProviderMap value) {    // Given    List<AuthProvider> providers = List.of(kcAuthProvider, nimAuthProvider);    mpAuthProviderMapService = new MpAuthProviderMapService(providers);    // When    AuthProvider result = mpAuthProviderMapService.getAuthProvider(value);    // Then    assertThat(result.getClass()).isEqualTo(value.getAuthProvider());  }  @Test  @DisplayName("Test getAuthProvider with invalid MpAuthProviderMap")  void testGetAuthProviderWithInvalidMap() {    // Given    List<AuthProvider> providers = List.of(kcAuthProvider);    mpAuthProviderMapService = new MpAuthProviderMapService(providers);    // When / Then    assertThatThrownBy(() -> mpAuthProviderMapService.getAuthProvider(NIM_AUTH_PROVIDER))        .isInstanceOf(RuntimeException.class)        .hasMessage("AuthProvider not found");  }}